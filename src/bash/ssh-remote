#!/bin/bash
# FILE: ssh-local.sh

#----------------------------------#
#      Remote SSH Login Agent      #
#                                  #
# Author: codejedi365              #
# Date:   10 May 2021              #
#----------------------------------#

# Interactive prompt
# shows available usernames, asks for remote ip address, tells you the port
# interactive prompt by default, but will allow -d,--defaults to use defaults
# additionally any other parameters will modify individual parameters
# could be included as Environment variables specified as
#

SRC_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )";   # source code location
WRK_DIR="$PWD";                                             # current location user is
[ -f "$WRK_DIR/users" ] && . "$WRK_DIR"/users || USERS=()              #include users list

[ -n "$REMOTE_ADDRESS" -a -z "$DEFAULT_REMOTE_ADDRESS" ] && DEFAULT_REMOTE_ADDRESS="$REMOTE_ADDRESS"
unset REMOTE_ADDRESS

# Default Vars
[ -z "$DEFAULT_SSH_PORT" ] && DEFAULT_SSH_PORT=22;
[ -z "$MODE_LAZY" ] && MODE_LAZY=false
MODE_PORTFWD=false
[ -z "$MODE_QUIET" ] && MODE_QUIET=false
MODE_TEST=false

usage() {
    echo "Usage: $0 [-hlfqT] [-a <address>] [-p <port>] [-u <user>]" 1>&2; exit 1;
}
help() {
    echo ""
    echo "SSH Remote Login Agent"
    echo "----------------------"
    echo "Interactive SSH connection initializer to remote IPv4 device"
    echo ""
    (usage)
	echo ""
    echo "Available Options: "
    echo "  -h  Help"
    echo "  -a  Destination IPv4 address"
    echo "  -p  Remote port to connect to"
    echo "         default: $DEFAULT_SSH_PORT"
    echo "  -l  Lazy mode or non-interactive mode and if variable is missing it fails or uses default"
    echo "  -u  username"
    echo "         default: $DEFAULT_USER"
    echo "  -f  Activate Port Forwarding mode"
    echo "         default: OFF"
	echo "  -q  Execute quietly"
	echo "  -T  Activate Test Mode. Builds command but does not execute connection"
    echo ""
    exit 0;
}
print_banner() {
	echo "";
    echo "====================";
    echo "| SSH Remote Login |";
    echo "====================";
	echo "";
}

interact() {
	
	test_ipaddr() {
		[ -n "$(grep -E '^(([0-9]{1,3}\.){3}[0-9]{1,3})$' <(echo "$1"))" ] && return 0 || return 1;
	}
	local prompt="Remote IPv4 Address"
	if test_ipaddr "$DEFAULT_REMOTE_ADDRESS"; then
		prompt="${prompt} [$DEFAULT_REMOTE_ADDRESS]"
	else
		unset DEFAULT_REMOTE_ADDRESS
	fi
    while [ -z "$REMOTE_ADDRESS" ]; do
        read -p "${prompt}: " dest;
		if [ -z "$dest" ] && [ -n "$DEFAULT_REMOTE_ADDRESS" ]; then
			dest="$DEFAULT_REMOTE_ADDRESS"
        elif [ -z "$dest" ]; then
            continue
        elif ! test_ipaddr "$dest"; then		# Check if address matches an IPv4 address
            echo 1>&2 "Invalid input. Expected an IPv4 address. Please try again."
			continue
        fi
        export REMOTE_ADDRESS="$dest";
    done
	echo "ADDRESS=$REMOTE_ADDRESS"
	
}

main() {
	if [ "$MODE_QUIET" = false ]; then
		print_banner
	fi
	interact
	if [ -f "$SRC_DIR/.ssh-connect" ]; then
		if [ $MODE_TEST = true ]; then
			. "$SRC_DIR/.ssh-connect" -q "${args2pass# }"
		else
			if [ ! -x "$SRC_DIR/.ssh-connect" ]; then
				chmod u+x "$SRC_DIR/.ssh-connect";
				[ "$?" != 0 ] && exit 127;
			fi
			"$SRC_DIR/.ssh-connect" -q "${args2pass# }";
		fi
		exit_code=$?;
		if [ $exit_code != 0 ]; then
			echo "Connection Failed. Exiting...";
			exit $exit_code;
		fi
	else 
		echo "FILE ./.ssh-connect NOT FOUND. Exiting...";
		exit 1
	fi
}

# Process line args
processArgs() {
	local OPTIND;
	while getopts ":a:u:p:hlfTq" o; do               # process & check command line options
		case "${o}" in
			a)
				[ -z "$(grep -E '^(([0-9]{1,3}\.){3}[0-9]{1,3})$' <(echo "${OPTARG}"))" ] && usage;		# Check if address matches an IPv4 address
				REMOTE_ADDRESS="${OPTARG}"
				;;
			u)
				[ -z "${OPTARG}" ] && usage; 
				args2pass="$args2pass -${o} ${OPTARG}"
				;;
			p)
				[[ "${OPTARG}" < 1 ]] && usage;
				args2pass="$args2pass -${o} ${OPTARG}"
				;;
			h)
				help
				;;
			l)
				[ -n "${OPTARG}" ] && usage; 
				args2pass="$args2pass -${o}"
				MODE_LAZY=true
				;;
			f)
				[ -n "${OPTARG}" ] && usage; 
				args2pass="$args2pass -${o}"
				;;
			T)
				[ -n "${OPTARG}" ] && usage;
				MODE_TEST=true
				args2pass="$args2pass -${o}"
				;;
			q)
				MODE_QUIET=true
				;;
			*)
				usage
				;;
		esac
	done
	shift $((OPTIND-1))
}

# ---------------------------
# Autorun - Ingest line args
# ---------------------------
processArgs "$@";

main                    # Run Main Loop
