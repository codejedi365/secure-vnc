#!/bin/bash
# FILE: ./.ssh-connect

#----------------------------------#
#      SSH Connect Syntax          #
#                                  #
# Author: codejedi365              #
# Date:   07 Nov 2020              #
#----------------------------------#

# Interactive prompt
# shows available usernames, asks for remote ip address, tells you the port
# interactive prompt by default
# additionally any other parameters will modify individual parameters
# could be included as Environment variables specified as
#

SRC_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )";   # source code location
WRK_DIR="$PWD";                                             # current location user is

# Default Vars
[ -z "$USERS" -a -f "$WRK_DIR/users" ] && . "$WRK_DIR"/users || USERS=()
[ -z "$DEFAULT_SSH_PORT" ] && DEFAULT_SSH_PORT=22
[ -z "$DEFAULT_USER" ] && DEFAULT_USER="$([ -n "$USERS" ] && echo "${USERS[0]}" || echo $USER)";
MODE_LAZY=false
MODE_PORTFWD=false
MODE_QUIET=false
MODE_TEST=false
# PREVENT ENV POLLUTION
unset SSH_USERNAME SSH_PORT #IDENTITY_KEY #REMOTE_ADDRESS

usage() {
    echo "Usage: $0 [-hlfqT] [-a <address>] [-p <port>] [-u <user>]" 1>&2; exit 1;
}
help() {
    echo ""
    echo "SSH Login Agent"
    echo "---------------"
    echo "Interactive SSH connection initializer to device"
    echo ""
    usage | echo;
    echo "Available Options: "
    echo "  -h  Help"
    echo "  -a  [REQUIRED] Hostname or IPv4 address"
    echo "  -p  Remote port to connect to"
	echo "         default: $DEFAULT_SSH_PORT"
    echo "  -l  Lazy mode or non-interactive mode and if variable is missing it fails or uses default"
    echo "  -u  username"
    echo "         default: $DEFAULT_USER"
    echo "  -f  Activate Port Forwarding mode"
    echo "         default: OFF"
	echo "  -q  Execute quietly"
	echo "  -T  Activate Test Mode. Builds command but does not execute connection"
    echo ""
    exit 0;
}
print_banner() {
	echo "";
    echo "===================";
    echo "|   SSH Connect   |";
    echo "===================";
	echo "";
}
print_users() {
	local userStr="Users: "
    if [ -n "$USERS" ]; then
        for u in "${USERS[@]}"; do
            userStr="$userStr $u,"
        done
        echo "${userStr%,}";
    fi
}
check_user() {
	local found=false
    if [ -n "$USERS" ]; then        # If there is a list of users
        for u in "${USERS[@]}"; do
            if [[ "$u" == "$1" ]]; then
                found=true
                break
            fi
        done
    else                    # Empty list of users
        found=true          # default to allow any username if there is not a specified list
    fi
	echo $found
}

interact() {
	if [ -z "$SSH_USERNAME" ]; then
		if [ "$MODE_LAZY" = false ]; then
			print_users
			read -e -p "Username on remote [$DEFAULT_USER]: " user;
		fi
		if [ -n "$user" -a "$(check_user "$user")" = true ]; then
			SSH_USERNAME="$user"
		else
			SSH_USERNAME="$DEFAULT_USER"
		fi
		echo "SSH_USERNAME=$SSH_USERNAME"
	fi

    if [ -f "$HOME/.ssh/$SSH_USERNAME" ]; then
        IDENTITY_KEY="$HOME/.ssh/$SSH_USERNAME";
        echo "Found identity key: ~/.ssh/$SSH_USERNAME"
        local confirmed=false
        while [ "$confirmed" = false ]; do
            read -e -p "Do you want to use this key pair (Y/n)? " response;
            if [ -n "$(echo $response | grep -i -E '^(Y|YES|YEP|N|NO|NOPE)$')" ]; then
                if [ -n "$(echo $response | grep -i -E '^(N|NO|NOPE)$')" ]; then
                    IDENTITY_KEY=""     # reset key
                else
                    echo "CONFIRMED: Loading identity key ~/.ssh/$SSH_USERNAME"
                fi
                confirmed=true;
            else
                echo 1>&2 "Invalid response received. Try again."
            fi
        done
    fi
    if [ -z "$IDENTITY_KEY" ]; then
        local valid=false;
        local count=0;
        local cwd="$PWD";
        [ -d "$HOME/.ssh/" ] && builtin cd "$HOME/.ssh/";

        while [ "$valid" = false ] && [ "$count" -lt "3" ]; do
            read -e -p "Enter private key filename: ~/.ssh/$ " ikey;
            if [ -f "$ikey" ]; then  # handle absolute path provided
                IDENTITY_KEY="$ikey"
            elif [ -z "$ikey" ]; then
                continue;
            else
                # find realpath, follow symbolic links and resolve relative paths
                ikey="$(cd "$(dirname "$HOME/.ssh/$ikey")"; pwd -P)/$(basename "$ikey")"
                if [ -f "$ikey" ]; then
                    IDENTITY_KEY="$ikey";
                else
                    count=$(($count + 1));  # FAILED +1
                fi
            fi

            if [ -n "$IDENTITY_KEY" ]; then
                valid=true;
                echo "Identity accepted.";
            fi
        done
        if [ "$valid" = false ]; then
            echo "Maximum number of attempts exceeded, no identity found" && exit 1;
        fi
        builtin cd "$cwd";
    fi

	if [ -z "$SSH_PORT" ]; then
		if [ "$MODE_LAZY" = false ]; then
			read -e -p "Remote service port [$DEFAULT_SSH_PORT]: " port;
		fi
		if [ -n "$port" ] && [[ $port > 0 ]] && [[ $port < 65536 ]]; then
			SSH_PORT="$port"
		else
			SSH_PORT="$DEFAULT_SSH_PORT"
		fi
		echo "SSH_PORT=$SSH_PORT"
	fi

#	if [ "$MODE_PORTFWD" ]; then
    # Print difference of both forwarding types
    # Local or Remote Forwarding
    # Tunnel entry IP
    # Tunnel entry port
    # Tunnel exit IP
    # Tunnel exit port
    # Forward another port (Yes/[No])?
#Need to add possiblities of backgrounding & option to delay close etc.
#	fi
}

# Required env vars
#  SSH_USERNAME
#  REMOTE_ADDRESS
#  SSH_PORT
#  IDENTITY_KEY
main() {
	if [ "$MODE_QUIET" = false ]; then
		print_banner
	fi
	
	# Verify ENV Vars exist. If not, exit.
	if [ -z "$REMOTE_ADDRESS" ]; then
		echo "connection failed.  Missing address.";
		exit 1;
	fi
	
	interact

	if [ "$MODE_TEST" = true ]; then
		[ "$MODE_QUIET" = false ] && (echo "PREVIEW: ssh $SSH_USERNAME@$REMOTE_ADDRESS -p $SSH_PORT");
		return 0;
	fi
	# ssh <username> @ <address> -p <port> -i <identity>
	echo ""; echo "ssh $SSH_USERNAME@$REMOTE_ADDRESS -p $SSH_PORT -i $IDENTITY_KEY"; echo "connecting...";
	ssh "$SSH_USERNAME@$REMOTE_ADDRESS" -p "$SSH_PORT" -i "$IDENTITY_KEY"
	
	
	if [ "$?" == 1 ]; then
		echo "Connection Failed. Exiting...";
		exit 1;
	fi
}

# Process line args
processArgs() {
	local OPTIND;
	while getopts ":a:u:p:hlfqT" o; do               # process & check command line options
		case "${o}" in
			a)
				local address="${OPTARG}"
				if [ -n "$(grep -E '^([A-Za-z0-9_-]+[A-Za-z0-9])(\.local)?$' <(echo "$address"))" ]; then			# Check if address matches a HOSTNAME
					[ -z "$(grep -E '(\.local)$' <(echo "$address"))" ] && address="$address.local";			# Add .local extension if it doesn't already have it

				elif [ -z "$(grep -E '^(([0-9]{1,3}\.){3}[0-9]{1,3})$' <(echo "$address"))" ]; then		# Check if address matches an IPv4 address
					usage
				fi
				REMOTE_ADDRESS="$address"
				;;
			u)
				found="$(check_user "${OPTARG}")";
				if [ "$found" = true ]; then
					SSH_USERNAME="${OPTARG}";
				else
					echo "Username given is not valid.";
					usage
				fi
				;;
			p)
				[[ "${OPTARG}" < 1 ]] && usage; 
				SSH_PORT="${OPTARG}"
				;;
			h)
				help
				;;
			l)
				[ -n "${OPTARG}" ] && usage;
				MODE_LAZY=true
				;;
			f)
				[ -n "${OPTARG}" ] && usage;
				MODE_PORTFWD=true
				;;
			q)
				MODE_QUIET=true
				;;
			T)
				MODE_TEST=true
				;;
			*)
				usage
				;;
		esac
	done
	shift $((OPTIND-1))
}

# ---------------------------
# Autorun - Ingest line args
# ---------------------------
processArgs "$@";

main                    # Run Main Loop
