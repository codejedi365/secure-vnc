#!/bin/bash
# FILE: ssh-local.sh

#----------------------------------#
#      Local SSH Login Agent       #
#                                  #
# Author: codejedi365              #
# Date:   10 May 2021              #
#----------------------------------#

# Interactive prompt
# shows available usernames, asks for remote ip address, tells you the port
# interactive prompt by default
# additionally any other parameters will modify individual parameters
# could be included as Environment variables specified as
#

SRC_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )";   # source code location
WRK_DIR="$PWD";                                             # current location user is
[ -f "$WRK_DIR/users" ] && . "$WRK_DIR"/users || USERS=()              #include users list

## Prevent Env pollution
[ -n "$REMOTE_ADDRESS" -a -z "$DEFAULT_rHOSTNAME" ] && DEFAULT_rHOSTNAME="$REMOTE_ADDRESS"
unset REMOTE_ADDRESS

# Default Vars
[ -z "$DEFAULT_SSH_PORT" ] && DEFAULT_SSH_PORT=22;
[ -n "$DEFAULT_rHOSTNAME" ] && [ -z "$(grep -E '(\.local)$' <(echo "$DEFAULT_rHOSTNAME"))" ] && DEFAULT_rHOSTNAME="${DEFAULT_rHOSTNAME}.local";
MODE_LAZY=false
MODE_PORTFWD=false
MODE_QUIET=false
MODE_TEST=false

usage() {
    echo "Usage: $0 [-hlfqT] [-a <address>] [-p <port>] [-u <user>]" 1>&2; exit 1;
}
help() {
    echo ""
    echo "SSH Local Login Agent"
    echo "---------------------"
    echo "Interactive SSH connection initializer to local device"
    echo ""
    usage | echo;
    echo "Available Options: "
    echo "  -h  Help"
    echo "  -a  Hostname or IPv4 address"
    echo "  -p  Remote port to connect to"
	echo "         default: $DEFAULT_SSH_PORT"
    echo "  -l  Lazy mode or non-interactive mode and if variable is missing it fails or uses default"
    echo "  -u  username"
    echo "  -f  Activate Port Forwarding mode"
    echo "         default: OFF"
	echo "  -q  Execute quietly"
	echo "  -T  Activate Test Mode. Builds command but does not execute connection"
    echo ""
    exit 0;
}
print_banner() {
	echo "";
    echo "===================";
    echo "| SSH Local Login |";
    echo "===================";
	echo "";
}

interact() {

	test_ipaddr() {
		[ -n "$(grep -E '^(([0-9]{1,3}\.){3}[0-9]{1,3})$' <(echo "$1"))" ] && return 0 || return 1;
	}
	test_FQDN() {
		[ -n "$(grep -E '^([A-Za-z0-9_-]+[A-Za-z0-9])(\.local)?$' <(echo "$1"))" ] && return 0 || return 1;
	}

    if [ -z "$REMOTE_ADDRESS" ] && [ "$MODE_LAZY" = false ]; then
        local dest=""
		local prompt="Hostname/IPv4 Address"
		if test_ipaddr "$DEFAULT_rHOSTNAME" || test_FQDN "$DEFAULT_rHOSTNAME"; then
        	prompt="${prompt} [$DEFAULT_rHOSTNAME]"
		else
			unset DEFAULT_rHOSTNAME
		fi
        while [ -z "$REMOTE_ADDRESS" ]; do
            read -p "${prompt}: " dest;

            if [ -z "$dest" ] && [ -n "$DEFAULT_rHOSTNAME" ]; then # empty input when there is a default
                dest=$DEFAULT_rHOSTNAME
            
            elif [ -z "$dest" ]; then       # empty input when there is NOT a default
                continue

            elif ! test_FQDN "$dest" && ! test_ipaddr "$dest"; then
                echo 1>&2 "Invalid Input received. Please enter either a hostname or an IPv4 address.";
				continue

			elif test_FQDN "$dest" && [ -z "$(grep -E '(\.local)$' <(echo "$dest"))" ]; then
				dest="$dest.local";

			fi
			export REMOTE_ADDRESS="$dest";
		done
	fi
	echo "ADDRESS=$REMOTE_ADDRESS"
}

# Required env vars
#  REMOTE_ADDRESS
main() {
	if [ "$MODE_QUIET" = false ]; then
		print_banner
	fi
	interact
	if [ -f "$SRC_DIR/.ssh-connect" ]; then
		if [ $MODE_TEST = true ]; then
			. "$SRC_DIR/.ssh-connect" -q "${args2pass# }"
		else
			if [ ! -x "$SRC_DIR/.ssh-connect" ]; then
				chmod u+x "$SRC_DIR/.ssh-connect";
				[ "$?" != 0 ] && exit 127;
			fi
			"$SRC_DIR/.ssh-connect" -q "${args2pass# }";
		fi
		exit_code=$?;
		if [ $exit_code != 0 ]; then
			echo "Connection Failed. Exiting...";
			exit $exit_code;
		fi
	else 
		echo "FILE ./.ssh-connect NOT FOUND. Exiting...";
		exit 1
	fi
}

# Process line args
processArgs() {
	local OPTIND;
	while getopts ":a:u:p:hlfqT" o; do               # process & check command line options
		case "${o}" in
			a)
				local address=${OPTARG}
				if [ -n "$(grep -E '^([A-Za-z0-9_-]+[A-Za-z0-9])(\.local)?$' <(echo "$address"))" ]; then			# Check if address matches a HOSTNAME
					[ -z "$(grep -E '(\.local)$' <(echo "$address"))" ] && address="$address.local";

				elif [ -z "$(grep -E '^(([0-9]{1,3}\.){3}[0-9]{1,3})$' <(echo "$address"))" ]; then		# Check if address matches an IPv4 address
					usage
				fi
				REMOTE_ADDRESS="$address"
				;;
			u)
				[ -z "${OPTARG}" ] && usage;
				args2pass="$args2pass -${o} ${OPTARG}"
				;;
			p)
				[[ "${OPTARG}" < 1 ]] && usage;
				args2pass="$args2pass -${o} ${OPTARG}"
				;;
			h)
				help
				;;
			l)
				[ -n "${OPTARG}" ] && usage; 
				args2pass="$args2pass -${o}"
				MODE_LAZY=true
				;;
			f)
				[ -n "${OPTARG}" ] && usage; 
				args2pass="$args2pass -${o}"
				;;
			T)
				[ -n "${OPTARG}" ] && usage;
				MODE_TEST=true;
				args2pass="$args2pass -${o}";
				;;
			q)
				MODE_QUIET=true
				;;
			*)
				usage
				;;
		esac
	done
	shift $((OPTIND-1))
}

# ---------------------------
# Autorun - Ingest line args
# ---------------------------
processArgs "$@";

main                    # Run Main Loop
